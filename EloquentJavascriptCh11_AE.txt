Array support

topEnv["array"] = function() {
  return Array.prototype.slice.call(arguments, 0);//had to look up, got first two but didn't know how to test from his example
};

topEnv["length"] = function(array){
  return array.length
};

topEnv["element"] = function(array, pos){
  return array[pos];
};

run("do(define(sum, fun(array,",
    "     do(define(i, 0),",
    "        define(sum, 0),",
    "        while(<(i, length(array)),",
    "          do(define(sum, +(sum, element(array, i))),",
    "             define(i, +(i, 1)))),",
    "        sum))),",
    "   print(sum(array(1, 2, 3))))");
// â†’ 6


uses a for loop to add arguments passed in to the local environment for the functiono called


function skipSpace(string) {
  var match = string.search(/^(\s|#.*)*/);
  return string.slice(match[0].length);
}

//not working --had to look at solution
specialForms["set"] = function(args, env) {
  if (args.length != 2 || args[0].type != "word")
    throw new SyntaxError("Bad use of set");
  var value = evaluate(args[1], env);
  var valName = args[0].name;
  for (var scope = env; scope; scope = Object.getPrototypeOf(scope)) {
  	if(Object.hasOwnProperty(env)){
  		env[args[0].name] = value;
    	return value;
    }
  }
  throw SyntaxError("Bad use of set");
};
//his from solutions -- still not working -- "cannot read length of undefined"
specialForms["set"] = function(args, env) {
  if (args.length != 2 || args[0].type != "word")
    throw new SyntaxError("Bad use of set");
  var value = evaluate(args[1], env);
  var valName = args[0].name;
  for (var scope = env; scope; scope = Object.getPrototypeOf(scope)) {
  	if(Object.prototype.hasOwnProperty.call(scop, valName)){
  		scope[varName] = value;
    	return value;
    }
  }
  throw SyntaxError("Bad use of set");
};
